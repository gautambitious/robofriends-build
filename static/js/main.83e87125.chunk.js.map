{"version":3,"sources":["components/Card.js","components/Card_list.js","robots.js","components/Search_Bar.js","components/Scroll_View.js","components/Filter.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","id","name","email","className","alt","src","Card_list","robots","map","robot","i","key","username","Seach_Bar","textUpdated","placeholder","type","onChange","Scroll_View","style","overflowY","border","marginTop","maxHeight","children","Filter","setRobots","idlth","sort","a","b","console","log","DropdownButton","title","Dropdown","Item","onClick","as","nameA","toLowerCase","nameB","Divider","App","setState","event","searchText","target","value","state","this","length","final","filter","includes","Search_Bar","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83e87125.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card= (props) => {\r\n\tconst {id, name, email} = props;\r\n\treturn (\r\n\t\t\t<div className=\"tc bg-light-green dib grow ma2 pa2 shadow-1\">\r\n\t\t\t  <img alt=\"Robot\" src={`https://robohash.org/${id}?size=200x200`}/>\r\n\t\t\t\t<h3> {name} </h3>\r\n\t\t\t\t<p> {email} </p>\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from \"./Card\";\r\n\r\nconst Card_list= ({robots}) => {\r\n  return (\r\n    robots.map((robot,i) => {\r\n      return(\r\n        <Card\r\n        key={robots[i].id}\r\n        id={robots[i].id}\r\n        name={robots[i].name}\r\n        email={robots[i].email} />\r\n      )\r\n    })\r\n  );\r\n}\r\nexport default Card_list;\r\n","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react';\r\n\r\nconst Seach_Bar= ({textUpdated}) => {\r\n  return (\r\n    <div>\r\n      <input className=\"br2 p2\"\r\n        placeholder=\"Search for Robots\"\r\n        type=\"search\"\r\n        onChange={textUpdated}/>\r\n    </div>\r\n  )\r\n}\r\nexport default Seach_Bar;\r\n","import React from 'react';\r\n\r\nconst Scroll_View= (props) => {\r\n  return(\r\n    <div style={{overflowY: 'scroll',border: '1px solid black' ,marginTop: '20px',maxHeight:'500px'}}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\nexport default Scroll_View;\r\n","import React, {useState} from \"react\";\r\nimport {DropdownButton, Dropdown} from \"react-bootstrap\";\r\n\r\nexport const Filter = ({setRobots, robots}) => {\r\n    const idhtl = () => {\r\n        setRobots(robots.sort((robot) => -robot.id));\r\n        console.log(robots.sort((a,b) => a.id>b.id ? -1 : 1))\r\n    }\r\n    const idlth = () => {\r\n        setRobots(robots.sort((a,b) => a.id<b.id ? -1 : 1));\r\n        console.log(robots.sort((a,b) => a.id<b.id ? -1 : 1));\r\n    }\r\n    const alpha = () => {\r\n        setRobots(robots.sort((a, b) => {\r\n                let nameA = a.name.toLowerCase(), nameB = b.name.toLowerCase();\r\n                if (nameA < nameB)\r\n                    return -1\r\n                if (nameA > nameB)\r\n                    return 1\r\n                return 0\r\n            }))\r\n    }\r\n    return (\r\n        <DropdownButton id=\"dropdown-basic-button\" title=\"Filter\">\r\n            <div className=\"\">\r\n                <Dropdown.Item onClick={idlth} className=\"nav-items\" as=\"button\">Id: Low to High</Dropdown.Item><br/>\r\n                <Dropdown.Item  onClick={idhtl} className=\"nav-items\" as=\"button\">Id: High to Low</Dropdown.Item><br/>\r\n                <Dropdown.Item onClick={alpha} className=\"nav-items\" as=\"button\">Alphabetical</Dropdown.Item>\r\n                <Dropdown.Divider className=\"nav-items\" />\r\n                <Dropdown.Item onClick={idlth} className=\"nav-items\" as=\"button\">Reset</Dropdown.Item>\r\n            </div>\r\n        </DropdownButton>\r\n    );\r\n}","import React, { Component } from 'react';\r\nimport Card_list from \"../components/Card_list\";\r\nimport { robots } from \"../robots\"\r\nimport Search_Bar from \"../components/Search_Bar\";\r\nimport Scroll_View from \"../components/Scroll_View\";\r\nimport {Filter} from \"../components/Filter\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component{\r\n  constructor(){\r\n  super();\r\n  this.state= {\r\n    robots: robots,\r\n    searchText: ''\r\n  }}\r\n  setRobots = (robots) => {\r\n      this.setState({robots: robots})\r\n  }\r\n  textUpdated= (event) => {\r\n    this.setState({searchText: event.target.value});\r\n  }\r\n  render(){\r\n      if(!this.state.robots.length){\r\n        return <h1> Loading.... </h1>\r\n      }\r\n      else{\r\n      const final=this.state.robots.filter(robot => {\r\n        return robot.name.toLowerCase().includes(this.state.searchText.toLowerCase())\r\n      })\r\n      return(\r\n        <div className=\"tc\">\r\n          <h1 className='f1 heading'> RoboFriends </h1>\r\n            <div className=\"center\">\r\n                <Search_Bar textUpdated={this.textUpdated}/>\r\n                <div className=\"ml5 search\">\r\n                <Filter setRobots={this.setRobots} robots={this.state.robots}/>\r\n                </div>\r\n            </div>\r\n          <Scroll_View>\r\n          <Card_list robots={final}/>\r\n          </Scroll_View>\r\n        </div>\r\n      );\r\n    }\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { robots } from './robots';\nimport 'tachyons';\n\n\n\nReactDOM.render(\n  <App />\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}